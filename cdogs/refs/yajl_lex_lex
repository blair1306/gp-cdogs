<dec f='codebrowser/src/cdogs/yajl/yajl_lex.h' l='78' type='yajl_tok yajl_lex_lex(yajl_lexer lexer, const unsigned char * jsonText, size_t jsonTextLen, size_t * offset, const unsigned char ** outBuf, size_t * outLen)'/>
<doc f='codebrowser/src/cdogs/yajl/yajl_lex.h' l='56'>/**
 * run/continue a lex. &quot;offset&quot; is an input/output parameter.
 * It should be initialized to zero for a
 * new chunk of target text, and upon subsetquent calls with the same
 * target text should passed with the value of the previous invocation.
 *
 * the client may be interested in the value of offset when an error is
 * returned from the lexer.  This allows the client to render useful
 * error messages.
 *
 * When you pass the next chunk of data, context should be reinitialized
 * to zero.
 *
 * Finally, the output buffer is usually just a pointer into the jsonText,
 * however in cases where the entity being lexed spans multiple chunks,
 * the lexer will buffer the entity and the data returned will be
 * a pointer into that buffer.
 *
 * This behavior is abstracted from client code except for the performance
 * implications which require that the client choose a reasonable chunk
 * size to get adequate performance.
 */</doc>
<def f='codebrowser/src/cdogs/yajl/yajl_lex.c' l='498' ll='688' type='yajl_tok yajl_lex_lex(yajl_lexer lexer, const unsigned char * jsonText, size_t jsonTextLen, size_t * offset, const unsigned char ** outBuf, size_t * outLen)'/>
<use f='codebrowser/src/cdogs/yajl/yajl_lex.c' l='755' u='c' c='yajl_lex_peek'/>
<use f='codebrowser/src/cdogs/yajl/yajl_parser.c' l='205' u='c' c='yajl_do_parse'/>
<use f='codebrowser/src/cdogs/yajl/yajl_parser.c' l='232' u='c' c='yajl_do_parse'/>
<use f='codebrowser/src/cdogs/yajl/yajl_parser.c' l='381' u='c' c='yajl_do_parse'/>
<use f='codebrowser/src/cdogs/yajl/yajl_parser.c' l='422' u='c' c='yajl_do_parse'/>
<use f='codebrowser/src/cdogs/yajl/yajl_parser.c' l='441' u='c' c='yajl_do_parse'/>
<use f='codebrowser/src/cdogs/yajl/yajl_parser.c' l='469' u='c' c='yajl_do_parse'/>
